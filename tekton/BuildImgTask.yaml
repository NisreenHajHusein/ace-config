apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-ace-img-task
spec:
  params:
  - name: BUILDER_IMAGE
    default: registry.redhat.io/rhel8/buildah
    description: The location of the buildah builder image.
    type: string
  - name: DOCKERFILE
    default: ./Dockerfile
    description: Path to the Dockerfile to build.
    type: string
  - name: CONTEXT
    default: .
    description: Path to the directory to use as context.
    type: string
  - name: TLSVERIFY
    default: "true"
    description: Verify the TLS on the registry endpoint
    type: string
  - name: FORMAT
    default: oci
    description: The format of the built container, oci or docker
    type: string
  - name: IMG_NAME
    description: name of the image that will be pushed in the registry
    default: custom-ace-img
    type: string
  - name: IMG_TAG
    description: tag value to used to tag the image that will be pushed.
    default: "2.0"
    type: string
  - name: namespace
    description: namespace used to build the image url
    default: cp4i
  resources:
    inputs:
    - name: source
      type: git
    outputs:
    - name: image
      type: image
  steps:
    - name: build
      image: $(params.BUILDER_IMAGE)
      script: |
        ls ./bars
        . ./imgcfg
        buildah bud --storage-driver=vfs --format=oci \
          --tls-verify=$(params.TLSVERIFY) --layers \
          -f $(params.DOCKERFILE) -t $(resources.outputs.image.url)/$(params.namespace)/$imgname:$imgtag .
      securityContext:
        privileged: true
      resources: {}
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: /workspace/source
    - name: push
      script: |
        . ./imgcfg
        buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
          $(resources.outputs.image.url)/$(params.namespace)/$imgname:$imgtag \
          'docker://$(resources.outputs.image.url)/$(params.namespace)/'$imgname:$imgtag
        echo -n $imgtag > /tekton/results/image_tag
        echo -n $imgname > /tekton/results/image_name
      image: $(params.BUILDER_IMAGE)
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: /workspace/source
  volumes:
  - emptyDir: {}
    name: varlibcontainers